/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   export.c                                           :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: hkaddour <hkaddour@student.1337.ma>        +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2022/09/23 13:52:18 by hkaddour          #+#    #+#             */
/*   Updated: 2022/09/23 15:14:21 by hkaddour         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../minishell.h"

int len_of_args(char **cmd)
{
  int i;

  i = 0;
  while (cmd[i])
    i++;
  return (i);
}

void  print_env_of_export(t_env *env)
{
  while (env)
  {
    printf("declare -x %s=\"%s\"\n", env->sec, env->value);
    env = env->next;
  }
}

void  alloc_node_of_export(t_env *lst, int len)
{
  int   i;
  t_env *node;

  i = 0;
  while (i < len)
  {
    node = node_allocate();
    lst->next = node;
    lst = node;
    i++;
  }
}

int check_if_equal_or_wrd(char *cmd)
{
  int i;

  i = 0;
  while (cmd[i])
  {
    if (cmd[i] == '=')
      return (1);
    i++;
  }
  return (0);
}

void  dup_opt_wrd(t_env *hd_env, char *cmd)
{
  int i;
  
  i = 0;
  hd_env->sec = ft_strdup(cmd);
}

void  export_cmd(t_data *data)
{
  int   i;
  int   len;
  t_env *trav_e;
  t_cmd *trav_c;

  i = 1;
  trav_e = data->l_env;
  trav_c = data->v_cmd;
  len = len_of_args(trav_c->cmd) - 1;
  if (!len)
    print_env_of_export(trav_e);
  else
  {
    while (trav_e->next)
      trav_e = trav_e->next;
    alloc_node_of_export(trav_e, len);
    trav_e = trav_e->next;
    while (trav_c->cmd[i])
    {
      if (!check_if_equal_or_wrd(trav_c->cmd[i]))
        dup_opt_wrd(trav_e, trav_c->cmd[i]);
      //else
      //  dup_opt_equal();
      i++;
      trav_e = trav_e->next;
    }
  }
}

//we have two option export the cmd and options are wrd || wrd=wrd
//wrd only just enter it with null in the value
//wrd=wrd get the sec and value by spliting it with =
//but first have to get the end of env to start entering args
//i have to loop for export args and = split and wrd not
//alloc a node and enter args and go to next one 
//lastly but not least sort the env uppercasse then lowercase
//export only should print the env
//EXPORT if is big dirha sghira
